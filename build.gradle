import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'org.javamodularity.moduleplugin' version '1.8.10'
    id 'org.beryx.jlink'                 version '2.24.4'
    id 'net.nemerosa.versioning'         version '2.15.1'
}

description = 'Disco CLI is a command line interface for the foojay.io Disco API'
mainClassName = "$moduleName/eu.hansolo.discocli/DiscoCLI"

Date buildTimeAndDate = new Date()
ext {
    moduleName      = 'eu.hansolo.discocli'
    buildDate       = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime       = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    ciOssrhUsername = System.getenv('OSSRH_USERNAME')
    ciOssrhPassword = System.getenv('OSSRH_PASSWORD')
    ciGHUser        = System.getenv('GH_USER')
    ciGHToken       = System.getenv('GH_TOKEN')
    gpgkey          = System.getenv("GPG_PRIVATE_KEY")
    gpgpassphrase   = System.getenv("PASSPHRASE")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation      'eu.hansolo:jdktools:17.0.11'
    implementation      'com.google.code.gson:gson:2.9.0'
    implementation      'info.picocli:picocli:4.6.3'
    annotationProcessor 'info.picocli:picocli-codegen:4.6.3'
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}


jar {
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect {  it.isDirectory() ? it : zipTree(it)  }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
        attributes(
                'Built-By'              : System.properties['user.name'],
                'Created-By'            : System.properties['java.version'] + " (" + System.properties['java.vendor'] + " " + System.properties['java.vm.version'] + ")",
                'Build-Date'            : project.buildDate,
                'Build-Time'            : project.buildTime,
                'Build-Revision'        : versioning.info.commit,
                'Specification-Title'   : project.name,
                'Specification-Version' : project.version,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.version,
                'Bundle-Name'           : project.name,
                'Bundle-License'        : 'https://www.apache.org/licenses/LICENSE-2.0;description=Apache License Version 2.0;link=https://spdx.org/licenses/Apache-2.0.html',
                'Bundle-Description'    : description,
                'Bundle-SymbolicName'   : 'eu.hansolo.discocli',
                'Export-Package'        : 'eu.hansolo.discocli,eu.hansolo.discocli.util',
                'Class-Path'            : configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class'            : 'eu.hansolo.discocli.DiscoCLI'
        )
    }
}


if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}


// start the demo from gradle
task DiscoCLI(type: JavaExec) {
    mainClass = "eu.hansolo.discocli/DiscoCLI"
    classpath = sourceSets.main.runtimeClasspath
}

// create one jar for the javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

// create one jar for the source files
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}
